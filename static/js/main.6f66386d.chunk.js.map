{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_this$props","this","props","id","name","email","react_default","a","createElement","className","src","concat","alt","Component","CardList","map","user","index","components_Card","key","SearchBox","type","placeholder","onChange","searchChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","Header","nextProps","nextState","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLocaleLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAOMA,EAAqB,CACvBC,YAAa,IAYXC,EAAqB,CACvBC,WAAW,EACXC,OAAQ,GACRC,MAAO,+CCNIC,mLAdF,IAAAC,EACqBC,KAAKC,MAAxBC,EADFH,EACEG,GAAIC,EADNJ,EACMI,KAAMC,EADZL,EACYK,MACjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BR,EAA1B,YAAwCS,IAAI,UACpDN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,YARLQ,aCsBJC,mLAnBP,IAAMjB,EAASI,KAAKC,MAAML,OAC1B,OACIS,EAAAC,EAAAC,cAAA,WAEQX,EAAOkB,IAAI,SAACC,EAAMC,GACd,OAAQX,EAAAC,EAAAC,cAACU,EAAD,CACJC,IAAKtB,EAAOoB,GAAOd,GACnBA,GAAIN,EAAOoB,GAAOd,GAClBC,KAAMP,EAAOoB,GAAOb,KACpBC,MAAOR,EAAOoB,GAAOZ,kBAX1BQ,aCaRO,mLAZP,OACQd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SACIC,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUtB,KAAKC,MAAMsB,uBARrBX,aCQTY,EARA,SAACvB,GACZ,OACII,EAAAC,EAAAC,cAAA,OAAKkB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChE3B,EAAM4B,WCkBJC,cApBX,SAAAA,EAAY7B,GAAO,IAAA8B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAhC,KAAA8B,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAhC,KAAAgC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApC,KAAMC,KACDoC,MAAQ,CACTC,UAAU,GAHCP,iFAODlC,EAAO0C,GACrBvC,KAAKwC,SAAS,CAACF,UAAU,qCAIzB,OAAGtC,KAAKqC,MAAMC,SACHjC,EAAAC,EAAAC,cAAA,qCAGJP,KAAKC,MAAM4B,gBAjBCjB,aCWZ6B,gMATSC,EAAWC,GAC/B,OAAO,mCAIP,OAAOtC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,sBAPUI,aCwBfgC,qMAGE5C,KAAKC,MAAM4C,mDAGN,IAAA9C,EACoDC,KAAKC,MAAvDR,EADFM,EACEN,YAAaqD,EADf/C,EACe+C,eAAgBlD,EAD/BG,EAC+BH,OAAQD,EADvCI,EACuCJ,UACtCoD,EAAiBnD,EAAOoD,OAAO,SAAAC,GACjC,OAAOA,EAAM9C,KAAK+C,oBAAoBC,SAAS1D,EAAYyD,uBAG/D,OAAIvD,EAEIU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,yBAKJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAC8C,EAAD,CAAW9B,aAAcuB,IACzBzC,EAAAC,EAAAC,cAAC+C,EAAD,KACIjD,EAAAC,EAAAC,cAACgD,EAAD,KACIlD,EAAAC,EAAAC,cAACiD,EAAD,CAAU5D,OAAQmD,cAzB5BnC,cAkCH6C,cAlDS,SAAApB,GACpB,MAAO,CACH5C,YAAa4C,EAAMqB,aAAajE,YAChCG,OAAQyC,EAAMsB,cAAc/D,OAC5BD,UAAW0C,EAAMsB,cAAchE,UAC/BE,MAAOwC,EAAMsB,cAAc9D,QAIP,SAAA+D,GACxB,MAAO,CACHd,eAAgB,SAAAe,GAAK,OAAID,ECdQ,CACrCxC,KCR+B,sBDS/B0C,QDYqDD,EAAME,OAAOC,SAC9DnB,gBAAiB,kBAAMe,ECVI,SAACA,GAChCA,EAAS,CAACxC,KCXwB,2BDYlC6C,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIT,EAAS,CAACxC,KCbK,yBDayB0C,QAASO,MAC/DC,MAAM,SAAAzE,GAAK,OAAI+D,EAAS,CAACxC,KCbG,wBDa0B0C,QAASjE,WD2CzD4D,CAA8Cb,GGhDzC2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qECNAC,EAASC,yBACTC,EAAcC,YAAgB,CAACrB,aXFT,WAAyC,IAAxCrB,EAAwC2C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlCxF,EAAoB2F,EAAcH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC1D,OAAOG,EAAO/D,MACV,ISb2B,sBTcvB,OAAOY,OAAOoD,OAAO,GAAI/C,EAAO,CAAC5C,YAAa0F,EAAOrB,UACzD,QACI,OAAOzB,IWHgCsB,cXatB,WAAyC,IAAxCtB,EAAwC2C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlCtF,EAAoByF,EAAcH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC3D,OAAOG,EAAO/D,MACV,IS1B8B,yBT2B1B,OAAOY,OAAOoD,OAAO,GAAI/C,EAAO,CAAC1C,WAAW,IAChD,IS3B8B,yBT4B1B,OAAOqC,OAAOoD,OAAO,GAAI/C,EAAO,CAACzC,OAAQuF,EAAOrB,QAASnE,WAAW,IACxE,IS5B6B,wBT6BzB,OAAOqC,OAAOoD,OAAO,GAAI/C,EAAO,CAACxC,MAAOsF,EAAOrB,QAASnE,WAAW,IACvE,QACI,OAAO0C,MWrBbgD,EAAQC,YAAYR,EAAaS,YAAgBC,IAAiBZ,IAExEa,IAASC,OACLrF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CAAUN,MAAOA,GACbhF,EAAAC,EAAAC,cAACqF,EAAD,OAEFC,SAASC,eAAe,SD6GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.6f66386d.chunk.js","sourcesContent":["import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false});\n        default:\n            return state;\n    }\n}","import React, {Component} from 'react';\n\nclass Card extends Component {\n    render() {\n        const {id, name, email} = this.props;\n        return (\n            <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n                <img src={`https://robohash.org/${id}?200x200`} alt='robot'/>\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React, {Component} from 'react';\nimport Card from './Card';\n\nclass CardList extends Component {\n    render() {\n        const robots = this.props.robots;\n        return(\n            <div>\n                {\n                    robots.map((user, index) => {\n                        return (<Card \n                            key={robots[index].id} \n                            id={robots[index].id} \n                            name={robots[index].name} \n                            email={robots[index].email}\n                            />\n                        );\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default CardList;","import React, {Component} from 'react';\n\nclass SearchBox extends Component {\n    render() {\n        return(\n                <div className='pa2'>\n                    <input \n                        className='pa3 ba b--green bg-lightest-blue'\n                        type='search' \n                        placeholder='search robots'\n                        onChange={this.props.searchChange}/>\n                </div>\n            );\n    }\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '600px'}}>\n            {props.children}\n        </div>\n        );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    \n    componentDidCatch(error, info) {\n        this.setState({hasError: true});\n    }\n    \n    render() {\n        if(this.state.hasError) {\n            return <h1>Ooops. That is not good</h1>\n        }\n        \n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nclass Header extends Component {\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return <h1 className='f1'>RoboFriends</h1>\n  }\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\nimport {setSearchField, requestRobots} from '../actions';\nimport './App.css';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispactchToProps = dispatch => {\n    return {\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    \n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n    \n    render() {\n        const {searchField, onSearchChange, robots, isPending} = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\n        });\n        \n        if (isPending) {\n            return (\n                <div className='tc'>\n                    <h1>Loading...</h1>\n                </div>\n                );\n        } else {\n            return(\n                <div className='tc'>\n                    <Header />\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n                );\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispactchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: users}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {createLogger} from 'redux-logger';\nimport {searchRobots, requestRobots} from './reducers';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}